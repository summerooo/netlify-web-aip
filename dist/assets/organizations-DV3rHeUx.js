import{s as e}from"./index-1yu-MD6X.js";function w(){return typeof crypto<"u"&&crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){const r=Math.random()*16|0;return(t==="x"?r:r&3|8).toString(16)})}async function h(){const{data:{user:t}}=await e.auth.getUser();if(!t)throw new Error("用户未登录");const{data:r,error:o}=await e.from("organization_members").select(`
      *,
      organizations (*)
    `).eq("user_id",t.id);if(o)throw o;return r?await Promise.all(r.map(async a=>{const i=a.organizations.id,{count:c}=await e.from("projects").select("*",{count:"exact",head:!0}).eq("organization_id",i),{count:s}=await e.from("organization_members").select("*",{count:"exact",head:!0}).eq("organization_id",i);return{...a.organizations,role:a.role,userRole:a.role,joined_at:a.joined_at,project_count:c||0,member_count:s||0}})):[]}async function x(t,r){const{data:{user:o}}=await e.auth.getUser();if(!o)throw new Error("用户未登录");const{data:n,error:a}=await e.from("organizations").insert({name:t,description:r,created_by:o.id}).select().single();if(a)throw a;const{error:i}=await e.from("organization_members").insert({organization_id:n.id,user_id:o.id,role:"admin"});if(i)throw i;return n}async function f(t){const{data:r,error:o}=await e.from("organizations").select("*").eq("id",t).single();if(o)throw o;return r}async function y(t){return f(t)}async function p(t,r){console.log("API updateOrganization called with:",{id:t,updates:r});const{data:o,error:n}=await e.from("organizations").update(r).eq("id",t).select().single();if(n)throw n;return o}async function E(t){try{const{data:r,error:o}=await e.from("organization_members").select("*").eq("organization_id",t);if(o)throw o;if(!r||r.length===0)return[];const n=r.map(s=>s.user_id),{data:a,error:i}=await e.from("user_profiles").select("id, full_name, email").in("id",n);i&&console.warn("获取用户资料失败:",i);const c=r.map(s=>{const d=a==null?void 0:a.find(g=>g.id===s.user_id),l=(d==null?void 0:d.full_name)||(d!=null&&d.email?d.email.split("@")[0]:null)||`用户-${s.user_id.substring(0,8)}`,u=(d==null?void 0:d.email)||s.user_id;return{id:s.id,organization_id:s.organization_id,user_id:s.user_id,role:s.role,joined_at:s.joined_at,name:l,email:u,full_name:l}});return console.log("组织成员数据:",c),c}catch(r){throw console.error("获取组织成员失败:",r),r}}async function b(t,r="member",o="",n=""){try{const a=w(),{data:{user:i}}=await e.auth.getUser();if(!i)throw new Error("用户未登录");const{data:c,error:s}=await e.from("organization_invitations").insert({organization_id:t,invited_by:i.id,role:r,token:a,email:n||null,expires_at:new Date(Date.now()+7*24*60*60*1e3).toISOString()}).select().single();if(s)throw s;return{...c,invitationToken:a,token:a}}catch(a){throw console.error("创建组织邀请失败:",a),a}}async function m(t){try{console.log("查询邀请token:",t);const{data:r,error:o}=await e.from("organization_invitations").select("*").eq("token",t).single();if(o)throw console.error("查询邀请失败:",o),new Error("邀请不存在或已失效");if(console.log("找到邀请:",r),r.status!=="pending")throw new Error("邀请已被使用或已取消");if(new Date(r.expires_at)<new Date)throw new Error("邀请已过期");const{data:n,error:a}=await e.from("organizations").select("id, name, description").eq("id",r.organization_id).single();if(a)throw console.error("获取组织信息失败:",a),new Error("组织不存在");let i=null;if(r.invited_by)try{const{data:c}=await e.from("user_profiles").select("full_name, email").eq("id",r.invited_by).single();i=c}catch(c){console.warn("无法获取邀请者信息，可能是权限限制:",c),i={full_name:"系统用户",email:""}}return{...r,organization:n,organizations:n,inviter:i,user_profiles:i,organizationName:(n==null?void 0:n.name)||"未知组织",inviterEmail:(i==null?void 0:i.email)||(i==null?void 0:i.full_name)||"未知邀请人"}}catch(r){throw console.error("获取邀请详情失败:",r),r}}async function v(t,r){try{const{data:{user:o}}=await e.auth.getUser();if(!o)throw new Error("用户未登录");const n=await m(t),{data:a}=await e.from("organization_members").select("*").eq("organization_id",n.organization_id).eq("user_id",o.id).single();if(a)throw new Error("您已经是该组织的成员");const{data:i,error:c}=await e.rpc("accept_organization_invitation_safe",{invitation_token:t,user_id:o.id});if(c){console.error("RPC调用失败，回退到直接插入:",c),console.log("准备添加用户到组织:",{organization_id:n.organization_id,user_id:o.id,role:n.role});const{error:s}=await e.from("organization_members").insert({organization_id:n.organization_id,user_id:o.id,role:n.role});if(s)throw console.error("添加组织成员失败:",s),new Error(`添加成员失败: ${s.message}`);console.log("成功添加用户到组织");const{error:d}=await e.from("organization_invitations").update({status:"accepted"}).eq("token",t);if(d)throw d}return n.organizations}catch(o){throw console.error("接受邀请失败:",o),o}}async function _(t,r){const{error:o}=await e.from("organization_members").delete().eq("organization_id",t).eq("user_id",r);if(o)throw o}async function q(t,r){return _(t,r)}async function O(t){const{data:{user:r}}=await e.auth.getUser();if(!r)throw new Error("用户未登录");try{const{data:o,error:n}=await e.functions.invoke("leave-organization",{body:{organizationId:t,userId:r.id}});if(n)throw n;return o}catch(o){console.warn("Edge Function 调用失败，使用直接API:",o);const{data:n,error:a}=await e.from("organizations").select("created_by").eq("id",t).single();if(a)throw new Error("组织不存在");if(n.created_by===r.id)throw new Error("组织创建者不能退出自己的组织");const{error:i}=await e.from("organization_members").delete().eq("organization_id",t).eq("user_id",r.id);if(i)throw new Error("退出组织失败");return{success:!0,message:"成功退出组织"}}}async function U(t){const{error:r}=await e.from("organizations").delete().eq("id",t);if(r)throw r}export{y as a,E as b,x as c,U as d,b as e,m as f,h as g,v as h,O as l,q as r,p as u};
